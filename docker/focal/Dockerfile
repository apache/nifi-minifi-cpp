# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.
#

# First stage: the build environment
FROM ubuntu:focal AS build_deps
LABEL maintainer="Apache NiFi <dev@nifi.apache.org>"

ARG MINIFI_VERSION

# Install the system dependencies needed for a build

ENV MINIFI_BASE_DIR /opt/minifi
ENV MINIFI_HOME $MINIFI_BASE_DIR/nifi-minifi-cpp-$MINIFI_VERSION
ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64/

RUN apt update \
    && DEBIAN_FRONTEND="noninteractive" apt install -y openjdk-8-jdk openjdk-8-source python3.9-dev sudo git maven autogen autoconf automake cmake software-properties-common pkgconf libtool \
    libfl-dev libboost-all-dev libusb-1.0-0-dev libpng-dev libgps-dev libsqliteodbc liblua5.3-dev\
    && mkdir -p "${MINIFI_BASE_DIR}"

COPY . ${MINIFI_BASE_DIR}


FROM build_deps AS release

ARG ENABLE_ALL=OFF
ARG ENABLE_PYTHON=OFF
ARG ENABLE_OPS=ON
ARG ENABLE_JNI=OFF
ARG ENABLE_OPENCV=OFF
ARG ENABLE_OPC=OFF
ARG ENABLE_GPS=OFF
ARG ENABLE_COAP=OFF
ARG ENABLE_SQL=OFF
ARG ENABLE_MQTT=OFF
ARG ENABLE_PCAP=OFF
ARG ENABLE_LIBRDKAFKA=OFF
ARG ENABLE_SENSORS=OFF
ARG ENABLE_USB_CAMERA=OFF
ARG ENABLE_TENSORFLOW=OFF
ARG ENABLE_AWS=OFF
ARG ENABLE_BUSTACHE=OFF
ARG ENABLE_SFTP=OFF
ARG ENABLE_OPENWSMAN=OFF
ARG ENABLE_AZURE=OFF
ARG ENABLE_ENCRYPT_CONFIG=ON
ARG ENABLE_NANOFI=OFF
ARG ENABLE_SPLUNK=OFF
ARG ENABLE_GCP=OFF
ARG ENABLE_ELASTICSEARCH=OFF
ARG ENABLE_SYSTEMD=ON
ARG DISABLE_CURL=OFF
ARG DISABLE_JEMALLOC=ON
ARG DISABLE_CIVET=OFF
ARG DISABLE_EXPRESSION_LANGUAGE=OFF
ARG DISABLE_ROCKSDB=OFF
ARG DISABLE_LIBARCHIVE=OFF
ARG DISABLE_LZMA=OFF
ARG DISABLE_BZIP2=OFF
ARG ENABLE_SCRIPTING=OFF
ARG DISABLE_PYTHON_SCRIPTING=ON
ARG ENABLE_LUA_SCRIPTING=ON
ARG ENABLE_KUBERNETES=OFF
ARG ENABLE_PROCFS=OFF
ARG ENABLE_PROMETHEUS=OFF
ARG DISABLE_CONTROLLER=OFF
ARG CMAKE_BUILD_TYPE=Release
ENV CC gcc-11
ENV CXX g++-11

# Run bootstrap and build
RUN cd $MINIFI_BASE_DIR \
    && ./bootstrap.sh -t \
    && cd $MINIFI_BASE_DIR/build \
    && cmake -DSTATIC_BUILD= -DSKIP_TESTS=true -DENABLE_ALL="${ENABLE_ALL}" -DENABLE_PYTHON="${ENABLE_PYTHON}" -DENABLE_OPS="${ENABLE_OPS}" \
    -DENABLE_JNI="${ENABLE_JNI}" -DENABLE_OPENCV="${ENABLE_OPENCV}" -DENABLE_OPC="${ENABLE_OPC}" -DENABLE_GPS="${ENABLE_GPS}" \
    -DENABLE_COAP="${ENABLE_COAP}" -DENABLE_SQL="${ENABLE_SQL}" -DENABLE_MQTT="${ENABLE_MQTT}" -DENABLE_PCAP="${ENABLE_PCAP}" \
    -DENABLE_LIBRDKAFKA="${ENABLE_LIBRDKAFKA}" -DENABLE_SENSORS="${ENABLE_SENSORS}" -DENABLE_USB_CAMERA="${ENABLE_USB_CAMERA}" \
    -DENABLE_TENSORFLOW="${ENABLE_TENSORFLOW}" -DENABLE_AWS="${ENABLE_AWS}" -DENABLE_BUSTACHE="${ENABLE_BUSTACHE}" -DENABLE_SFTP="${ENABLE_SFTP}" \
    -DENABLE_OPENWSMAN="${ENABLE_OPENWSMAN}" -DENABLE_AZURE="${ENABLE_AZURE}" -DENABLE_NANOFI=${ENABLE_NANOFI} -DENABLE_SYSTEMD="${ENABLE_SYSTEMD}" \
    -DDISABLE_CURL="${DISABLE_CURL}" -DDISABLE_JEMALLOC="${DISABLE_JEMALLOC}" -DDISABLE_CIVET="${DISABLE_CIVET}" -DENABLE_SPLUNK=${ENABLE_SPLUNK} \
    -DENABLE_TEST_PROCESSORS=OFF -DDISABLE_EXPRESSION_LANGUAGE="${DISABLE_EXPRESSION_LANGUAGE}" -DDISABLE_ROCKSDB="${DISABLE_ROCKSDB}" \
    -DDISABLE_LIBARCHIVE="${DISABLE_LIBARCHIVE}" -DDISABLE_LZMA="${DISABLE_LZMA}" -DDISABLE_BZIP2="${DISABLE_BZIP2}" \
    -DENABLE_SCRIPTING="${ENABLE_SCRIPTING}" -DDISABLE_PYTHON_SCRIPTING="${DISABLE_PYTHON_SCRIPTING}" -DENABLE_LUA_SCRIPTING="${ENABLE_LUA_SCRIPTING}" \
    -DENABLE_KUBERNETES="${ENABLE_KUBERNETES}" -DENABLE_GCP="${ENABLE_GCP}" -DENABLE_PROCFS="${ENABLE_PROCFS}" -DENABLE_PROMETHEUS="${ENABLE_PROMETHEUS}" \
    -DENABLE_ELASTICSEARCH="${ENABLE_ELASTICSEARCH}" -DDISABLE_CONTROLLER="${DISABLE_CONTROLLER}" -DENABLE_ENCRYPT_CONFIG="${ENABLE_ENCRYPT_CONFIG}" \
    -DAWS_ENABLE_UNITY_BUILD=OFF -DEXCLUDE_BOOST=ON -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" .. \
    && make -j "$(nproc)" package
